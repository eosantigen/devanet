---

### OS_FAMILY: DEBIAN ###

- name: Install libvirt dependencies
  ansible.builtin.apt:
    update_cache: no
    name:
      - libvirt-daemon-system
      - libnss-libvirt
      - virt-top
      - bridge-utils
      - python3-libvirt
      - python3-lxml
    state: latest
  when: ansible_os_family == "Debian"
  become: True

- name: Enable and start libvirt daemons
  ansible.builtin.systemd:
    daemon_reload: yes
    state: started
    enabled: yes
    masked: no
    name: libvirtd
  when: ansible_os_family == "Debian"
  become: True

- name: Edit libvirt configs
  ansible.builtin.replace:
    path: /etc/nsswitch.conf
    backup: yes
    regexp: '^.*hosts:.*$(?m)'
    replace: 'hosts: files mdns4_minimal [NOTFOUND=return] dns libvirt libvirt_guest'
  when: ansible_os_family == "Debian"
  become: True

## Grab dynamically the DevaPC Ethernet interface to configure bridged networking

- name: Bootstrap the bridge interface
  community.general.nmcli:
    conn_name: br0
    ifname: br0
    type: bridge
    stp: no
    method4: manual
    ip4: 
     - 192.168.1.11/24
    gw4: "{{ ansible_default_ipv4.gateway }}"
    dns4: "{{ item }}"
    autoconnect: yes
    state: present
  with_items:
   - "{{ ansible_dns.nameservers }}"
  become: True

- name: Enable the bridge default network
  community.libvirt.virt_net:
    name: default
    state: active
  become: True

### GLOBAL ###

- name: Disable net.bridge.bridge-nf-call-arptables
  ansible.posix.sysctl:
    ignoreerrors: no
    reload: yes
    state: present
    sysctl_file: /etc/sysctl.conf
    sysctl_set: yes
    name: net.bridge.bridge-nf-call-arptables
    value: '0'
  become: True

- name: Disable net.bridge.bridge-nf-call-iptables
  ansible.posix.sysctl:
    ignoreerrors: no
    reload: yes
    state: present
    sysctl_file: /etc/sysctl.conf
    sysctl_set: yes
    name: net.bridge.bridge-nf-call-iptables
    value: '0'
  become: True

## TODO
## Configure a vm on libvirt IF the previous role install_libvirt succeeds. ---> TBD

# Storage pools

- name: Destroy a storage volume & pool
  ansible.builtin.script: scripts/virsh_destroy.bash
  become: true
  ignore_errors: true
  tags: 
    - destroy

- name: Define a storage pool
  community.libvirt.virt_pool:
    command: define
    name: "{{ item }}"
    xml: "{{ lookup('template', 'storage/{{ item }}.storage-pool.xml.j2') }}"
    uri: qemu:///system
  with_items: "{{ libvirt_guest_names }}"

- name: Start a storage pool
  community.libvirt.virt_pool:
    command: start
    name: "{{ item }}"
  with_items: "{{ libvirt_guest_names }}"

# Storage pool - volume

- name: Create a storage pool volume (partition)
  ansible.builtin.script: scripts/virsh_create.bash
  become: true

# Domains (aka VM)

- name: Define domain(s) (guest VM)
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'domains/{{ item }}.xml.j2') }}"
    uri: qemu:///system
  with_items: "{{ libvirt_guest_names }}"

- name: Start domain
  community.libvirt.virt:
    name: "{{ item }}"
    state: running
    autostart: no
    uri: 'qemu:///system'
  with_items: "{{ libvirt_guest_names }}"
  become: true
...